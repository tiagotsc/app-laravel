moment.locale('pt-BR');

$('#year').mask('0000');
$('#month, #day').mask('00');

mainMonths(moment().format('YYYY'));

// Limpa campo
$('.eraser').on('click', function(){
	if($(this).attr('type') == 'day'){
		$('#day').val('');
	}else{ // Month
		$('#month, #day').val('');
		$('#day').datepicker('destroy');
	}
})

// Aplica filtro e faz requisição dos dados do dashboard
$('#filter').on('click', function(){
	
	let year = $('#year').val();
	let month = $('#month').val();
	let day = $('#day').val();

	let dt = [];
	dt.push(year);
	let typeFilter = 'year';

	if(month != '' && month != undefined){
		typeFilter = 'month'
	}

	if(day != '' && day != undefined){
		typeFilter = 'day'
	}

	alert(typeFilter)
})

// Monta calendário ano
$("#year").datepicker( {
    format: "yyyy",
    autoclose: 'true',
	language: 'pt-BR',
    startView: "years", 
    minViewMode: "years",
	startDate: new Date(moment("20220101", "YYYYMMDD").format()),
	endDate: new Date()
}).on('changeDate', function(value) {
	$('#month,#day').val(''); // Limpa campos mês e dia
	mainMonths(value.date.getFullYear())
});

// Monta calendário mês
function mainMonths(year){

	let endDate = new Date();

	if(parseInt(year) < parseInt(moment().format('YYYY'))){ // Se ano informado for menor que corrente
		endDate = new Date(moment(year+"1231", "YYYYMMDD").format()) // Mês vai até dezembro do ano informado
	}
	
	$('#month, #day').datepicker('destroy');
	$("#month").datepicker( {
		format: "mm",
		autoclose: 'true',
		language: 'pt-BR',
		startView: "months", 
		minViewMode: "months",
		startDate: new Date(moment(year+"0101", "YYYYMMDD").format()),
		endDate: endDate
	}).on('changeDate', function(value) {
		$('#day').val('');
		mainDays();
	});
}

// Monta calendário dia
function mainDays(){

	let endDate = new Date();
	let year = $('#year').val();
	let month = $('#month').val();
	if(parseInt(year+month) != parseInt(moment().format('YYYYMM'))){ // Se ano mês informado for diferente do corrente
		endDate = new Date(moment(year+month+"01", "YYYYMMDD").endOf('month').format()) // Seta último dia do mês ano informado
	}

	$('#day').datepicker('destroy');
	$("#day").datepicker( {
		format: "dd",
		autoclose: 'true',
		language: 'pt-BR',
		startView: "days", 
		minViewMode: "days",
		startDate: new Date(moment($('#year').val()+$('#month').val()+"01", "YYYYMMDD").format()),
		endDate: endDate
	}).on('changeDate', function(value) {
		if($('#month').val() == ''){
			$('#day').val('');
		}
	});
}

/*
frmValidate(
	"#frm",
	{
		type: {
			required: true
		},
		reference_date: {
			required: true
		},
		minimum_quantity: {
			required: true
		},
		number_days: {
			required: {
				depends: function(){
					var status = false;
					if($("#type").val() == 'fato_relevante'){ // Se for fato relevante, campo é obrigatório
						var status = true;
					}
					return status;
				}
			},
			min: 1
		},
		check_days: {
			required: {
				depends: function(){
					var status = false;
					if($("#type").val() == 'encarteiramento'){ // Se for fato relevante, campo é obrigatório
						var status = true;
					}
					return status;
				}
			},
			min: 0
		},
		start_date: {
			required: true
		},
		end_date: {
			required: true
		},
        name: {
            required:{
				depends: function(element){
					var status = false;
					if($("#type").val() == 'fato_relevante'){ // Se for fato relevante, campo é obrigatório
						var status = true;
					}
					return status;
				}
			}
        }
	},
	{
		type: {
			required: "Selecione, por favor!"
		},
		reference_date: {
			required: "Informe, por favor!"
		},
		minimum_quantity: {
			required: "Informe, por favor!"
		},
		number_days: {
			required: "Informe, por favor!",
			min: "Número precisa ser superior a zero!"
		},
		check_days: {
			required: "Informe, por favor!",
			min: "Informe zero ou superior!"
		},
		start_date: {
			required: "Informe, por favor!"
		},
		end_date: {
			required: "Informe, por favor!"
		},
		name: {
			required: "Informe, por favor!"
        }
	}
);
*/